(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{403:function(t,s,a){"use strict";a.r(s);var n=a(47),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("개인적으로 부동산 분석 토이 프로젝트를 진행하다가 두 GPS 좌표간 거리를 구해야 할 일이 생겼습니다. 해당 경험이 전무한 저로서는 (무식하면 용감하다고) 구글링을 통해 찾게 된 코드를 바로 써먹을 생각에 신이 나 있었는데요, 그 코드는 아래와 같습니다.")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" math "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" sin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sqrt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" atan2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" radians\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# approximate radius of earth in km")]),t._v("\nR "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6373.0")]),t._v("\n\nlat1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" radians"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("52.2296756")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nlon1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" radians"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("21.0122287")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nlat2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" radians"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("52.406374")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nlon2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" radians"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16.9251681")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ndlon "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lon2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" lon1\ndlat "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lat2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" lat1\n\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dlat "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" cos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lat1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" cos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lat2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" sin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dlon "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" atan2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sqrt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sqrt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ndistance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" R "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" c\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Result:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" distance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Should be:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("278.546")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"km"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br")])]),a("p",[t._v("(한가지 참고 목적으로 짚고 넘어갈 점은, 파이썬 math 모듈의 삼각함수는 degree가 아닌 radian을 사용한다는 점입니다.)")]),t._v(" "),a("p",[t._v("그런데 여기서 "),a("a",{attrs:{href:"https://stackoverflow.com/questions/19412462/getting-distance-between-two-points-based-on-latitude-longitude",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kurt Peek의 날카로운 답변"),a("OutboundLink")],1),t._v("을 보게 됩니다. 지구는 완전한 구가 아닌 회전타원체에 가깝고 이로 인해 0.5%에 상당하는 오차가 생길 수 있다는 점 때문에 Haversine distance 대신 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/World_Geodetic_System",target:"_blank",rel:"noopener noreferrer"}},[t._v("WGS-84"),a("OutboundLink")],1),t._v(" 좌표 시스템을 사용하는 Vincenty distance를 사용할 것을 추천했습니다.")]),t._v(" "),a("blockquote",[a("p",[t._v("The answers above are based on the Haversine formula, which assumes the earth is a sphere, which results in errors of up to about 0.5% (according to help(geopy.distance)). Vincenty distance uses more accurate ellipsoidal models such as WGS-84, and is implemented in geopy.")])]),t._v(" "),a("p",[t._v("다만 최근의 "),a("a",{attrs:{href:"https://geopy.readthedocs.io/en/stable/#module-geopy.distance",target:"_blank",rel:"noopener noreferrer"}},[t._v("geopy documentation"),a("OutboundLink")],1),t._v("을 보면, Vincenty(1975) 역시 deprecate 되었고, 현재는 Karney(2013)를 디폴트 알고리즘으로 하고 있다는 점을 알게 되었습니다.")]),t._v(" "),a("blockquote",[a("p",[t._v("The geodesic distance is the shortest distance on the surface of an ellipsoidal model of the earth. The default algorithm uses the method is given by Karney (2013) (geodesic); this is accurate to round-off and always converges. An older deprecated method due to Vincenty (1975) (vincenty) is also available; this is only accurate to 0.2 mm and the distance calculation fails to converge for nearly antipodal points.")])]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" geopy "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" distance\nnewport_ri "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("41.49008")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("71.312796")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncleveland_oh "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("41.499498")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("81.695391")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("distance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("distance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newport_ri"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cleveland_oh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("miles"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nwellington "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("41.32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("174.81")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nsalamanca "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("40.96")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("distance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("distance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("wellington"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" salamanca"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("km"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])])])},[],!1,null,null,null);e.options.__file="python_lat_long_dist.md";s.default=e.exports}}]);